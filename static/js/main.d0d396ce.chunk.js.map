{"version":3,"sources":["app/logo.svg","state/action_utils.ts","state/actions.ts","state/reducer.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","createAction","actionType","type","ACTION_INCREASE_COUNT_1","ACTION_INCREASE_COUNT_2","ACTION_RESET_STATE","AppActions","increaseCount1","increaseCount2","reset","initialState","count1","count2","reducer","state","App","loadedData","localStorage","getItem","useReducer","JSON","parse","dispatch","useEffect","setItem","stringify","className","src","logo","alt","onClick","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,wLCkBpC,SAASC,EAAyBC,GAEvC,OAAO,WACL,MAAO,CAACC,KAAMD,ICnBX,IAAME,EAA0B,0BAC1BC,EAA0B,0BAC1BC,EAAqB,qBAErBC,EAAa,CACxBC,eACIP,EAA6CG,GACjDK,eACIR,EAA6CI,GACjDK,MAAOT,EAAwCK,I,gkBCJ1C,IAAMK,EAAyB,CACpCC,OAAQ,EACRC,OAAQ,GAGH,SAASC,IAA6D,IAArDC,EAAoD,uDAAlCJ,EACxC,QAD0E,wCAC3DR,MACb,KAAKC,EACH,OAAO,EAAP,GACKW,EADL,CACYH,OAAQG,EAAMH,OAAS,IAErC,KAAKP,EACH,OAAO,EAAP,GACKU,EADL,CACYF,OAAQE,EAAMF,OAAS,IAErC,KAAKP,EACH,OAAO,EAAP,GACKK,GAEP,QACE,OAAOI,GCrBb,IA+CeC,EA/CO,WACpB,IAAMC,EAAaC,aAAaC,QAAQ,aADd,EAGAC,qBAAWN,EAASG,EAAaI,KAAKC,MAAML,GAAcN,GAH1D,mBAGnBI,EAHmB,KAGZQ,EAHY,KAK1BC,qBAAU,WACRN,aAAaO,QAAQ,YAAaJ,KAAKK,UAAUX,MAChD,CAACA,IAOJ,OACE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mEAIF,yBAAKH,UAAU,YACb,6BACE,4DAAkCZ,EAAMH,OAAxC,WACA,4BAAQmB,QAAS,kBAAMR,EAAShB,EAAWC,oBAA3C,eAEDO,EAAMH,QAAU,GACf,6BACE,uDACA,4DAAkCG,EAAMF,OAAxC,WACA,4BAAQkB,QAAS,kBAAMR,EAAShB,EAAWE,oBAA3C,eAGHM,EAAMF,QAAU,GACf,6BACE,0DAIN,yBAAKc,UAAU,cACb,4BAAQI,QAhCI,WAChBb,aAAac,QACbT,EAAShB,EAAWG,WA8BhB,YCnCYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0d396ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// Written by Patrick Desjardins\n// https://patrickdesjardins.com/blog/typescript-with-strong-typed-action-when-using-usereducer-of-react-hooks\n\n/**\n * Create an action that has a strongly typed string literal name with a\n * strongly typed payload\n */\nexport function createActionPayload<TypeAction, TypePayload>(\n    actionType: TypeAction): (payload: TypePayload) =>\n    ActionsWithPayload<TypeAction, TypePayload> {\n  return (p: TypePayload): ActionsWithPayload<TypeAction, TypePayload> => {\n    return {payload: p, type: actionType};\n  };\n}\n\n/**\n * Create an action with no payload\n */\nexport function createAction<TypeAction>(actionType: TypeAction): () =>\n    ActionsWithoutPayload<TypeAction> {\n  return (): ActionsWithoutPayload<TypeAction> => {\n    return {type: actionType};\n  };\n}\n/**\n * Create an action with a payload\n */\nexport interface ActionsWithPayload<TypeAction, TypePayload> {\n  type: TypeAction;\n  payload: TypePayload;\n}\n\n/**\n * Create an action that does not have a payload\n */\nexport interface ActionsWithoutPayload<TypeAction> {\n  type: TypeAction;\n}\n\n/**\n * A very general type that means to be \"an object with a many field created\n * with createActionPayload and createAction\n */\ninterface ActionCreatorsMapObject {\n  [key: string]: (...args: any[]) =>\n      ActionsWithPayload<any, any>| ActionsWithoutPayload<any>;\n}\n\n/**\n * Use this Type to merge several action object that has field created with\n * createActionPayload or createAction E.g. type ReducerWithActionFromTwoObjects\n * = ActionsUnion<typeof ActionsObject1 &amp; typeof ActionsObject2>;\n */\nexport type ActionsUnion<A extends ActionCreatorsMapObject> =\n    ReturnType<A[keyof A]>;\n","import {ActionsUnion, createAction, createActionPayload} from './action_utils';\n\nexport const ACTION_INCREASE_COUNT_1 = 'ACTION_INCREASE_COUNT_1';\nexport const ACTION_INCREASE_COUNT_2 = 'ACTION_INCREASE_COUNT_2';\nexport const ACTION_RESET_STATE = 'ACTION_RESET_STATE';\n\nexport const AppActions = {\n  increaseCount1:\n      createAction<typeof ACTION_INCREASE_COUNT_1>(ACTION_INCREASE_COUNT_1),\n  increaseCount2:\n      createAction<typeof ACTION_INCREASE_COUNT_2>(ACTION_INCREASE_COUNT_2),\n  reset: createAction<typeof ACTION_RESET_STATE>(ACTION_RESET_STATE),\n};\n\nexport type AllActions = ActionsUnion<typeof AppActions>;\n","import {ACTION_INCREASE_COUNT_1, ACTION_INCREASE_COUNT_2, ACTION_RESET_STATE, AllActions} from './actions';\n\ninterface AppState {\n  count1: number;\n  count2: number;\n}\n\nexport const initialState: AppState = {\n  count1: 0,\n  count2: 0,\n}\n\nexport function reducer(state: AppState = initialState, action: AllActions) {\n  switch (action.type) {\n    case ACTION_INCREASE_COUNT_1:\n      return {\n        ...state, count1: state.count1 + 1,\n      }\n    case ACTION_INCREASE_COUNT_2:\n      return {\n        ...state, count2: state.count2 + 1,\n      }\n    case ACTION_RESET_STATE:\n      return {\n        ...initialState\n      }\n    default:\n      return state;\n  }\n}\n","import React, { useEffect, useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AppActions } from '../state/actions';\nimport { reducer, initialState } from '../state/reducer';\n\nconst App: React.FC = () => {\n  const loadedData = localStorage.getItem('gameState');\n\n  const [state, dispatch] = useReducer(reducer, loadedData ? JSON.parse(loadedData) : initialState);\n\n  useEffect(() => {\n    localStorage.setItem('gameState', JSON.stringify(state))\n  }, [state]);\n\n  const resetData = () => {\n    localStorage.clear();\n    dispatch(AppActions.reset());\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          You find yourself in a dark room...\n        </p>\n      </header>\n      <div className=\"App-body\">\n        <div>\n          <p>You have performed action one {state.count1} times.</p>\n          <button onClick={() => dispatch(AppActions.increaseCount1())}>Action One</button>\n        </div>\n        {state.count1 >= 5 &&\n          <div>\n            <p>A new event has occured!</p>\n            <p>You have performed action two {state.count2} times.</p>\n            <button onClick={() => dispatch(AppActions.increaseCount2())}>Action Two</button>\n          </div>\n        }\n        {state.count2 >= 5 &&\n          <div>\n            <p>That's all for now folks!</p>\n          </div>\n        }\n      </div>\n      <div className=\"App-footer\">\n        <button onClick={resetData}>reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}